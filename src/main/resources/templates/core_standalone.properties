spring.application.name=AuthenticationAuthorizationManager
spring.cloud.config.enabled=false
eureka.client.enabled=false
spring.zipkin.enabled=false
server.port=TODO
aam.database.name=TODO
logging.file=logs/AuthenticationAuthorizationManager.log
# username and password of the AAM module (of your choice) -- master password used to manage your AAM (e.g. register new users), not your credentials in the Core
aam.deployment.owner.username=TODO
aam.deployment.owner.password=TODO
# path of the JavaKeyStore file you created using the ServiceAAMKeystoreFactory that you could put next to the AAM jar
aam.security.KEY_STORE_FILE_NAME=TODO.p12
# name of the root ca certificate entry in the Keystore you produced using the SymbIoTeSecurity Factory
aam.security.ROOT_CA_CERTIFICATE_ALIAS=TODO
# name of the certificate entry in the Keystore you produced using the SymbIoTeSecurity Factory
aam.security.CERTIFICATE_ALIAS=TODO
# symbiote keystore password
aam.security.KEY_STORE_PASSWORD=TODO
# symbiote certificate private key password
aam.security.PV_KEY_PASSWORD=TODO
# HTTPS only
# name of the keystore containing the letsencrypt (or other) certificate and key pair for your AAM host's SSL, you need to put next to the AAM jar
server.ssl.key-store=classpath:TODO.p12
# SSL keystore password
server.ssl.key-store-password=TODO
# SSL certificate private key password
server.ssl.key-password=TODO
# http to https redirect
security.require-ssl=TODO
# anomaly detection verbosity level
anomaly.verbosity.level=TODO

# Cache settings. If validated token is in cache, component certificate or available AAMs were aquired recently, value from cache is returned to avoid communication with another AAM. In case of missing, default values are used.
# time (in milliseconds) for which valid token should be cached (DEFAULT: 60000)
aam.cache.validToken.expireMillis=TODO
# size of validToken cache. If size set to -1, validToken cache has no limit. (DEFAULT: 1000)
aam.cache.validToken.size=TODO
# time (in seconds) for which componentCertificate should be cached (DEFAULT: 60)
aam.cache.componentCertificate.expireSeconds=TODO
# time (in seconds) for which availableAAMs should be cached (DEFAULT: 60)
aam.cache.availableAAMs.expireSeconds=TODO
#JWT validity time in milliseconds - how long the tokens issued to your users (apps) are valid... think maybe of an hour, day, week?
aam.deployment.token.validityMillis=TODO
# allowing offline validation of foreign tokens by signature trust-chain only. Useful when foreign tokens are expected to be used along with no internet access
aam.deployment.validation.allow-offline=TODO
# needed to offer available aams service
symbIoTe.core.interface.url=TODO
# needed to expose oneself to other components
symbIoTe.localaam.url=TODO
# amqp settings
rabbit.host=TODO
rabbit.username=TODO
rabbit.password=TODO
rabbit.exchange.aam.name=TODO
rabbit.exchange.aam.type=TODO
rabbit.exchange.aam.durable=TODO
rabbit.exchange.aam.autodelete=TODO
rabbit.exchange.aam.internal=TODO
# amqp property making bad messages in the queue discarded
spring.rabbitmq.listener.simple.default-requeue-rejected=false
# amqp property setting time, after which message in queue is old and removed from queue
rabbit.message-ttl=5000
# amqp queues for basic functionalities
rabbit.queue.validate.request=TODO
rabbit.queue.get.user.details=TODO
rabbit.queue.manage.user.request=TODO
rabbit.queue.manage.revocation.request=TODO
rabbit.queue.manage.attributes=TODO
rabbit.queue.event=rabbit.queue.event
# amqp routing keys for basic functionalities
rabbit.routingKey.validate.request=TODO
rabbit.routingKey.get.user.details=TODO
rabbit.routingKey.manage.user.request=TODO
rabbit.routingKey.manage.revocation.request=TODO
rabbit.routingKey.manage.attributes=TODO
rabbit.routingKey.event=rabbit.routingKey.event

# amqp queues required for core AAM functionalities
rabbit.queue.ownedservices.request=TODO
rabbit.queue.manage.platform.request=TODO
rabbit.queue.manage.smartspace.request=TODO
# amqp routing keys required for core AAM functionalities
rabbit.routingKey.ownedservices.request=TODO
rabbit.routingKey.manage.platform.request=TODO
rabbit.routingKey.manage.smartspace.request=TODO
# profile activating core AAM functionalities (do not change the value!)
spring.profiles.active=core
# Clients-oriented anomaly detection verbosity level
anomaly.verbosity.level=FULL
# Local AD queues
rabbit.queue.event=symbIoTe-AnomalyDetectionModule-event
rabbit.routingKey.event=symbIoTe.AnomalyDetectionModule.event