# REQUIRED SETTINGS:
spring.application.name=AuthenticationAuthorizationManager
spring.cloud.config.failFast=true
spring.cloud.config.retry.maxAttempts=1000
spring.cloud.config.uri=TODO

# AAM settings
# username and password of the AAM module (of your choice) -- master password used to manage your AAM (e.g. register new users), not your credentials in the Core
aam.deployment.owner.username=TODO
aam.deployment.owner.password=TODO
# path of the JavaKeyStore file you created using the ServiceAAMKeystoreFactory that you could put next to the AAM jar
aam.security.KEY_STORE_FILE_NAME=TODO.p12
# name of the root ca certificate entry in the Keystore you produced using the SymbIoTeSecurity Factory
aam.security.ROOT_CA_CERTIFICATE_ALIAS=TODO
# name of the certificate entry in the Keystore you produced using the SymbIoTeSecurity Factory
aam.security.CERTIFICATE_ALIAS=TODO
# symbiote keystore password
aam.security.KEY_STORE_PASSWORD=TODO
# symbiote certificate private key password
aam.security.PV_KEY_PASSWORD=TODO
# HTTPS only
# name of the keystore containing the letsencrypt (or other) certificate and key pair for your AAM host's SSL, you need to put next to the AAM jar
server.ssl.key-store=classpath:TODO.p12
# SSL keystore password
server.ssl.key-store-password=TODO
# SSL certificate private key password
server.ssl.key-password=TODO
# http to https redirect
security.require-ssl=TODO
# anomaly detection verbosity level
anomaly.verbosity.level=TODO

# amqp property making bad messages in the queue discarded
spring.rabbitmq.listener.simple.default-requeue-rejected=false
# amqp property setting time, after which message in queue is old and removed from queue
rabbit.message-ttl=5000