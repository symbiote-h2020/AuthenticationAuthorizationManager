spring.cloud.config.enabled=false
spring.application.name=AuthenticationAuthorizationManager
logging.file=logs/AuthenticationAuthorizationManager.log
eureka.client.enabled=false
spring.zipkin.enabled=false
aam.environment.coreInterfaceAddress=https://localhost:8801
server.port=8801
aam.environment.platformAAMSuffixAtInterWorkingInterface=
aam.environment.interworkingInterfacePort=:8811
aam.database.name=symbiote-aam-tests-database
# AAM settings
aam.deployment.owner.username=AAMOwner
aam.deployment.owner.password=AAMPassword
# name of the PAAM JavaKeyStore file you need to put in your src/main/resources directory
aam.security.KEY_STORE_FILE_NAME=core.p12
# name of the root ca certificate entry in the Keystore you were given
aam.security.ROOT_CA_CERTIFICATE_ALIAS=core-1
# name of the certificate entry in the Keystore you were given
aam.security.CERTIFICATE_ALIAS=core-1
# symbiote keystore password
aam.security.KEY_STORE_PASSWORD=1234567
# symbiote certificate private key password
aam.security.PV_KEY_PASSWORD=1234567
#JWT validity time in milliseconds - how long the tokens issued to your users (apps) are valid... think maybe of an hour, day, week?
aam.deployment.token.validityMillis=2000
# allowing offline validation of foreign tokens by signature trust-chain only. Useful when foreign tokens are expected to be used along with no internet access
aam.deployment.validation.allow-offline=true
# HTTPS only
# name of the keystore containing the letsencrypt (or other) certificate and key pair for your AAM host's SSL, you need to put it also in your src/main/resources directory
server.ssl.key-store=classpath:https.p12
# SSL keystore password
server.ssl.key-store-password=1234567
# SSL certificate private key password
server.ssl.key-password=1234567
# http to https redirect
security.require-ssl=true
rabbit.host=localhost
rabbit.username=guest
rabbit.password=guest
rabbit.exchange.aam.name=symbIoTe.AuthenticationAuthorizationManager
rabbit.exchange.aam.type=direct
rabbit.exchange.aam.durable=true
rabbit.exchange.aam.autodelete=false
rabbit.exchange.aam.internal=false
# amqp queues
rabbit.queue.validate.request=symbIoTe-AuthenticationAuthorizationManager-validate_request
rabbit.queue.getHomeToken.request=symbIoTe-AuthenticationAuthorizationManager-getHomeToken_request
rabbit.queue.get.user.details=symbIoTe-AuthenticationAuthorizationManager-get_user_details_request
rabbit.queue.get.platform.owners.names=symbIoTe-AuthenticationAuthorizationManager-get_platform_owners_names
rabbit.queue.manage.federation.rule=symbIoTe-AuthenticationAuthorizationManager-federation_rule_manage_request
rabbit.queue.manage.user.request=symbIoTe-AuthenticationAuthorizationManager-manage_user_request
rabbit.queue.manage.platform.request=symbIoTe-AuthenticationAuthorizationManager-manage_platform_request
rabbit.queue.manage.revocation.request=symbIoTe-AuthenticationAuthorizationManager-manage_revocation_request
rabbit.queue.manage.attributes=symbIoTe-AuthenticationAuthorizationManager-manage_local_attributes_request
# routing keys
rabbit.routingKey.validate.request=symbIoTe.AuthenticationAuthorizationManager.validate_request
rabbit.routingKey.getHomeToken.request=symbIoTe.AuthenticationAuthorizationManager.getHomeToken_request
rabbit.routingKey.get.user.details=symbIoTe-AuthenticationAuthorizationManager.get_user_details_request
rabbit.routingKey.get.platform.owners.names=symbIoTe-AuthenticationAuthorizationManager.get_platform_owners_names
rabbit.routingKey.manage.federation.rule=symbIoTe-AuthenticationAuthorizationManager.federation_rule_manage_request
rabbit.routingKey.manage.user.request=symbIoTe.AuthenticationAuthorizationManager.manage_user_request
rabbit.routingKey.manage.platform.request=symbIoTe-AuthenticationAuthorizationManager.manage_platform_request
rabbit.routingKey.manage.revocation.request=symbIoTe-AuthenticationAuthorizationManager.manage_revocation_request
rabbit.routingKey.manage.attributes=symbIoTe-AuthenticationAuthorizationManager.manage_local_attributes_request