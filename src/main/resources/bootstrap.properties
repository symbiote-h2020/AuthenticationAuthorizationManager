spring.cloud.config.enabled=true
spring.application.name=AuthenticationAuthorizationManager
logging.file=logs/AuthenticationAuthorizationManager.log
# AAM settings
aam.deployment.owner.username=MarioKusek
aam.deployment.owner.password=symbiotedocker
# name of the PAAM JavaKeyStore file you need to put in your src/main/resources directory
aam.security.KEY_STORE_FILE_NAME=/paam-keystore.p12
# name of the root ca certificate entry in the Keystore you produced using the SymbIoTeSecurity Factory
aam.security.ROOT_CA_CERTIFICATE_ALIAS=caam
# name of the certificate entry in the Keystore you were produced using the SymbIoTeSecurity Factory
aam.security.CERTIFICATE_ALIAS=paam
# symbiote keystore password
aam.security.KEY_STORE_PASSWORD=pass
# symbiote certificate private key password
aam.security.PV_KEY_PASSWORD=pass
#JWT validity time in milliseconds - how long the tokens issued to your users (apps) are valid... think maybe of an hour, day, week?
aam.deployment.token.validityMillis=600000
# allowing offline validation of foreign tokens by signature trust-chain only. Useful when foreign tokens are expected to be used along with no internet access
aam.deployment.validation.allow-offline=false
# HTTPS only
# name of the keystore containing the letsencrypt (or other) certificate and key pair for your AAM host's SSL, you need to put it also in your src/main/resources directory
#server.ssl.key-store=classpath:/cert.p12
# SSL keystore password
#server.ssl.key-store-password=symbiotedocker
# SSL certificate private key password
#server.ssl.key-password=symbiotedocker
# http to https redirect
#security.require-ssl=true
